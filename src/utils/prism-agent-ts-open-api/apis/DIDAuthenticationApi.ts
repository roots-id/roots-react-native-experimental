/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticationChallengeSubmissionRequest,
  AuthenticationChallengeSubmissionResponse,
  CreateAuthenticationChallengeRequest,
  CreateAuthenticationChallengeResponse,
  ErrorResponse,
} from '../models';
import {
    AuthenticationChallengeSubmissionRequestFromJSON,
    AuthenticationChallengeSubmissionRequestToJSON,
    AuthenticationChallengeSubmissionResponseFromJSON,
    AuthenticationChallengeSubmissionResponseToJSON,
    CreateAuthenticationChallengeRequestFromJSON,
    CreateAuthenticationChallengeRequestToJSON,
    CreateAuthenticationChallengeResponseFromJSON,
    CreateAuthenticationChallengeResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CreateDidAuthenticationChallengeRequest {
    createAuthenticationChallengeRequest: CreateAuthenticationChallengeRequest;
}

export interface CreateDidAuthenticationChallengeSubmissionRequest {
    authenticationChallengeSubmissionRequest: AuthenticationChallengeSubmissionRequest;
}

/**
 * 
 */
export class DIDAuthenticationApi extends runtime.BaseAPI {

    /**
     * Create a new authentication challenge that will be later verified by Castor for a relying-party. 
     * Create a new authentication challenge
     */
    async createDidAuthenticationChallengeRaw(requestParameters: CreateDidAuthenticationChallengeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAuthenticationChallengeResponse>> {
        if (requestParameters.createAuthenticationChallengeRequest === null || requestParameters.createAuthenticationChallengeRequest === undefined) {
            throw new runtime.RequiredError('createAuthenticationChallengeRequest','Required parameter requestParameters.createAuthenticationChallengeRequest was null or undefined when calling createDidAuthenticationChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/authentication/challenges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthenticationChallengeRequestToJSON(requestParameters.createAuthenticationChallengeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAuthenticationChallengeResponseFromJSON(jsonValue));
    }

    /**
     * Create a new authentication challenge that will be later verified by Castor for a relying-party. 
     * Create a new authentication challenge
     */
    async createDidAuthenticationChallenge(requestParameters: CreateDidAuthenticationChallengeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAuthenticationChallengeResponse> {
        const response = await this.createDidAuthenticationChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a challenge submission that will be verified by Castor for a relying-party. 
     * Create a verification from challenge
     */
    async createDidAuthenticationChallengeSubmissionRaw(requestParameters: CreateDidAuthenticationChallengeSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticationChallengeSubmissionResponse>> {
        if (requestParameters.authenticationChallengeSubmissionRequest === null || requestParameters.authenticationChallengeSubmissionRequest === undefined) {
            throw new runtime.RequiredError('authenticationChallengeSubmissionRequest','Required parameter requestParameters.authenticationChallengeSubmissionRequest was null or undefined when calling createDidAuthenticationChallengeSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/authentication/challenge-submissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticationChallengeSubmissionRequestToJSON(requestParameters.authenticationChallengeSubmissionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationChallengeSubmissionResponseFromJSON(jsonValue));
    }

    /**
     * Submit a challenge submission that will be verified by Castor for a relying-party. 
     * Create a verification from challenge
     */
    async createDidAuthenticationChallengeSubmission(requestParameters: CreateDidAuthenticationChallengeSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticationChallengeSubmissionResponse> {
        const response = await this.createDidAuthenticationChallengeSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
