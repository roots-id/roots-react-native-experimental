/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateManagedDIDResponse,
  CreateManagedDidRequest,
  DIDOperationResponse,
  ErrorResponse,
  ListManagedDIDResponseInner,
  UpdateManagedDIDRequest,
} from '../models';
import {
    CreateManagedDIDResponseFromJSON,
    CreateManagedDIDResponseToJSON,
    CreateManagedDidRequestFromJSON,
    CreateManagedDidRequestToJSON,
    DIDOperationResponseFromJSON,
    DIDOperationResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListManagedDIDResponseInnerFromJSON,
    ListManagedDIDResponseInnerToJSON,
    UpdateManagedDIDRequestFromJSON,
    UpdateManagedDIDRequestToJSON,
} from '../models';

export interface CreateManagedDidOperationRequest {
    createManagedDidRequest: CreateManagedDidRequest;
}

export interface DeactivateManagedDidRequest {
    didRef: string;
}

export interface PublishManagedDidRequest {
    didRef: string;
}

export interface UpdateManagedDidRequest {
    didRef: string;
    updateManagedDIDRequest: UpdateManagedDIDRequest;
}

/**
 * 
 */
export class DIDRegistrarApi extends runtime.BaseAPI {

    /**
     * Create unpublished DID and store it inside PrismAgent\'s wallet. The private keys of the DID is managed by PrismAgent. The DID can later be published to blockchain using publications endpoint. 
     * Create unpublished DID and store it in PrismAgent\'s wallet
     */
    async createManagedDidRaw(requestParameters: CreateManagedDidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateManagedDIDResponse>> {
        if (requestParameters.createManagedDidRequest === null || requestParameters.createManagedDidRequest === undefined) {
            throw new runtime.RequiredError('createManagedDidRequest','Required parameter requestParameters.createManagedDidRequest was null or undefined when calling createManagedDid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/did-registrar/dids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateManagedDidRequestToJSON(requestParameters.createManagedDidRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateManagedDIDResponseFromJSON(jsonValue));
    }

    /**
     * Create unpublished DID and store it inside PrismAgent\'s wallet. The private keys of the DID is managed by PrismAgent. The DID can later be published to blockchain using publications endpoint. 
     * Create unpublished DID and store it in PrismAgent\'s wallet
     */
    async createManagedDid(requestParameters: CreateManagedDidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateManagedDIDResponse> {
        const response = await this.createManagedDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate DID in PrismAgent\'s wallet and post deactivate operation to blockchain. 
     * Deactivate DID in PrismAgent\'s wallet and post deactivate operation to blockchain
     */
    async deactivateManagedDidRaw(requestParameters: DeactivateManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DIDOperationResponse>> {
        if (requestParameters.didRef === null || requestParameters.didRef === undefined) {
            throw new runtime.RequiredError('didRef','Required parameter requestParameters.didRef was null or undefined when calling deactivateManagedDid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/did-registrar/dids/{didRef}/deactivations`.replace(`{${"didRef"}}`, encodeURIComponent(String(requestParameters.didRef))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DIDOperationResponseFromJSON(jsonValue));
    }

    /**
     * Deactivate DID in PrismAgent\'s wallet and post deactivate operation to blockchain. 
     * Deactivate DID in PrismAgent\'s wallet and post deactivate operation to blockchain
     */
    async deactivateManagedDid(requestParameters: DeactivateManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DIDOperationResponse> {
        const response = await this.deactivateManagedDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all DIDs stored in PrismAgent\'s wallet
     * List all DIDs stored in PrismAgent\'s wallet
     */
    async listManagedDidRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListManagedDIDResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/did-registrar/dids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListManagedDIDResponseInnerFromJSON));
    }

    /**
     * List all DIDs stored in PrismAgent\'s wallet
     * List all DIDs stored in PrismAgent\'s wallet
     */
    async listManagedDid(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListManagedDIDResponseInner>> {
        const response = await this.listManagedDidRaw(initOverrides);
        return await response.value();
    }

    /**
     * Publish the DID stored in PrismAgent\'s wallet to the blockchain. 
     * Publish the DID stored in PrismAgent\'s wallet to the blockchain
     */
    async publishManagedDidRaw(requestParameters: PublishManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DIDOperationResponse>> {
        if (requestParameters.didRef === null || requestParameters.didRef === undefined) {
            throw new runtime.RequiredError('didRef','Required parameter requestParameters.didRef was null or undefined when calling publishManagedDid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/did-registrar/dids/{didRef}/publications`.replace(`{${"didRef"}}`, encodeURIComponent(String(requestParameters.didRef))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DIDOperationResponseFromJSON(jsonValue));
    }

    /**
     * Publish the DID stored in PrismAgent\'s wallet to the blockchain. 
     * Publish the DID stored in PrismAgent\'s wallet to the blockchain
     */
    async publishManagedDid(requestParameters: PublishManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DIDOperationResponse> {
        const response = await this.publishManagedDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update DID in PrismAgent\'s wallet and post update operation to blockchain. This endpoint updates the DID document from last confirmed operation. Submitting multiple update operations without waiting for confirmation will result in some operation being rejected as only one operation can be appended from last confirmed operation. 
     * Update DID in PrismAgent\'s wallet and post update operation to blockchain
     */
    async updateManagedDidRaw(requestParameters: UpdateManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DIDOperationResponse>> {
        if (requestParameters.didRef === null || requestParameters.didRef === undefined) {
            throw new runtime.RequiredError('didRef','Required parameter requestParameters.didRef was null or undefined when calling updateManagedDid.');
        }

        if (requestParameters.updateManagedDIDRequest === null || requestParameters.updateManagedDIDRequest === undefined) {
            throw new runtime.RequiredError('updateManagedDIDRequest','Required parameter requestParameters.updateManagedDIDRequest was null or undefined when calling updateManagedDid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/did-registrar/dids/{didRef}/updates`.replace(`{${"didRef"}}`, encodeURIComponent(String(requestParameters.didRef))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateManagedDIDRequestToJSON(requestParameters.updateManagedDIDRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DIDOperationResponseFromJSON(jsonValue));
    }

    /**
     * Update DID in PrismAgent\'s wallet and post update operation to blockchain. This endpoint updates the DID document from last confirmed operation. Submitting multiple update operations without waiting for confirmation will result in some operation being rejected as only one operation can be appended from last confirmed operation. 
     * Update DID in PrismAgent\'s wallet and post update operation to blockchain
     */
    async updateManagedDid(requestParameters: UpdateManagedDidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DIDOperationResponse> {
        const response = await this.updateManagedDidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
