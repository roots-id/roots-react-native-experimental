/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RevocationStatus,
  W3CCredentialRevocationRequest,
  W3CCredentialRevocationResponse,
  W3CCredentialStatus,
} from '../models';
import {
    RevocationStatusFromJSON,
    RevocationStatusToJSON,
    W3CCredentialRevocationRequestFromJSON,
    W3CCredentialRevocationRequestToJSON,
    W3CCredentialRevocationResponseFromJSON,
    W3CCredentialRevocationResponseToJSON,
    W3CCredentialStatusFromJSON,
    W3CCredentialStatusToJSON,
} from '../models';

export interface GetCredentialRevocationStatusByIdRequest {
    id: string;
}

export interface GetRevocationOperationStatusByIdRequest {
    id: string;
}

export interface RevokeCredentialByIdRequest {
    w3CCredentialRevocationRequest: W3CCredentialRevocationRequest;
}

/**
 * 
 */
export class RevocationRegistryApi extends runtime.BaseAPI {

    /**
     * Get credentials revocation status by credential id
     * Get credentials revocation status by credential id
     */
    async getCredentialRevocationStatusByIdRaw(requestParameters: GetCredentialRevocationStatusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<W3CCredentialStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCredentialRevocationStatusById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/revocation-registry/credential-status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => W3CCredentialStatusFromJSON(jsonValue));
    }

    /**
     * Get credentials revocation status by credential id
     * Get credentials revocation status by credential id
     */
    async getCredentialRevocationStatusById(requestParameters: GetCredentialRevocationStatusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<W3CCredentialStatus> {
        const response = await this.getCredentialRevocationStatusByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get revocation operation status by id
     * Get revocation operation status by id
     */
    async getRevocationOperationStatusByIdRaw(requestParameters: GetRevocationOperationStatusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevocationStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRevocationOperationStatusById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/revocation-registry/operations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevocationStatusFromJSON(jsonValue));
    }

    /**
     * Get revocation operation status by id
     * Get revocation operation status by id
     */
    async getRevocationOperationStatusById(requestParameters: GetRevocationOperationStatusByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevocationStatus> {
        const response = await this.getRevocationOperationStatusByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke credential by id
     * Revoke credential by id
     */
    async revokeCredentialByIdRaw(requestParameters: RevokeCredentialByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<W3CCredentialRevocationResponse>> {
        if (requestParameters.w3CCredentialRevocationRequest === null || requestParameters.w3CCredentialRevocationRequest === undefined) {
            throw new runtime.RequiredError('w3CCredentialRevocationRequest','Required parameter requestParameters.w3CCredentialRevocationRequest was null or undefined when calling revokeCredentialById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/revocation-registry/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: W3CCredentialRevocationRequestToJSON(requestParameters.w3CCredentialRevocationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => W3CCredentialRevocationResponseFromJSON(jsonValue));
    }

    /**
     * Revoke credential by id
     * Revoke credential by id
     */
    async revokeCredentialById(requestParameters: RevokeCredentialByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<W3CCredentialRevocationResponse> {
        const response = await this.revokeCredentialByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
