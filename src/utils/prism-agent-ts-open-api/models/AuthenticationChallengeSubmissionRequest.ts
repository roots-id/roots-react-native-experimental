/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthenticationChallengeSubmissionRequest
 */
export interface AuthenticationChallengeSubmissionRequest {
    /**
     * A JWT challenge that a user must provide to Castor SDK to create a ChallengeSubmission.
     * JWT payload contains nonce, state, expiration, issuer
     * @type {string}
     * @memberof AuthenticationChallengeSubmissionRequest
     */
    challenge: string;
    /**
     * A challenged subject that must complete the challenge.
     * May refer to DID or VerificationMethod inside a DID. If VerificationMethod
     * is used, it must be inside the authentication verification relationship.
     * @type {string}
     * @memberof AuthenticationChallengeSubmissionRequest
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationChallengeSubmissionRequest
     */
    signature: string;
}

/**
 * Check if a given object implements the AuthenticationChallengeSubmissionRequest interface.
 */
export function instanceOfAuthenticationChallengeSubmissionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "challenge" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "signature" in value;

    return isInstance;
}

export function AuthenticationChallengeSubmissionRequestFromJSON(json: any): AuthenticationChallengeSubmissionRequest {
    return AuthenticationChallengeSubmissionRequestFromJSONTyped(json, false);
}

export function AuthenticationChallengeSubmissionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationChallengeSubmissionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenge': json['challenge'],
        'subject': json['subject'],
        'signature': json['signature'],
    };
}

export function AuthenticationChallengeSubmissionRequestToJSON(value?: AuthenticationChallengeSubmissionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge': value.challenge,
        'subject': value.subject,
        'signature': value.signature,
    };
}

