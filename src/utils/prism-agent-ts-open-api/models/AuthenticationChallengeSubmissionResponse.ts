/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthenticationChallengeSubmissionResponse
 */
export interface AuthenticationChallengeSubmissionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AuthenticationChallengeSubmissionResponse
     */
    success: boolean;
    /**
     * An opaque string provided by a relying-party indicating the purpose of
     * this challenge in order to avoid repurposing the challenge submission.
     * @type {string}
     * @memberof AuthenticationChallengeSubmissionResponse
     */
    state?: string;
}

/**
 * Check if a given object implements the AuthenticationChallengeSubmissionResponse interface.
 */
export function instanceOfAuthenticationChallengeSubmissionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "success" in value;

    return isInstance;
}

export function AuthenticationChallengeSubmissionResponseFromJSON(json: any): AuthenticationChallengeSubmissionResponse {
    return AuthenticationChallengeSubmissionResponseFromJSONTyped(json, false);
}

export function AuthenticationChallengeSubmissionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationChallengeSubmissionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': json['success'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function AuthenticationChallengeSubmissionResponseToJSON(value?: AuthenticationChallengeSubmissionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'state': value.state,
    };
}

