/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionInvitation } from './ConnectionInvitation';
import {
    ConnectionInvitationFromJSON,
    ConnectionInvitationFromJSONTyped,
    ConnectionInvitationToJSON,
} from './ConnectionInvitation';

/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    self: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    kind: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    connectionId: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    myDid?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    theirDid?: string;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    state: ConnectionStateEnum;
    /**
     * 
     * @type {Date}
     * @memberof Connection
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Connection
     */
    updatedAt?: Date;
    /**
     * 
     * @type {ConnectionInvitation}
     * @memberof Connection
     */
    invitation: ConnectionInvitation;
}


/**
 * @export
 */
export const ConnectionStateEnum = {
    Pending: 'pending',
    Success: 'success',
    Failed: 'failed'
} as const;
export type ConnectionStateEnum = typeof ConnectionStateEnum[keyof typeof ConnectionStateEnum];


/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "self" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "connectionId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "invitation" in value;

    return isInstance;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': !exists(json, 'label') ? undefined : json['label'],
        'self': json['self'],
        'kind': json['kind'],
        'connectionId': json['connectionId'],
        'myDid': !exists(json, 'myDid') ? undefined : json['myDid'],
        'theirDid': !exists(json, 'theirDid') ? undefined : json['theirDid'],
        'state': json['state'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'invitation': ConnectionInvitationFromJSON(json['invitation']),
    };
}

export function ConnectionToJSON(value?: Connection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'self': value.self,
        'kind': value.kind,
        'connectionId': value.connectionId,
        'myDid': value.myDid,
        'theirDid': value.theirDid,
        'state': value.state,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'invitation': ConnectionInvitationToJSON(value.invitation),
    };
}

