/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Connection } from './Connection';
import {
    ConnectionFromJSON,
    ConnectionFromJSONTyped,
    ConnectionToJSON,
} from './Connection';

/**
 * 
 * @export
 * @interface ConnectionCollection
 */
export interface ConnectionCollection {
    /**
     * 
     * @type {string}
     * @memberof ConnectionCollection
     */
    self: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionCollection
     */
    kind: string;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof ConnectionCollection
     */
    contents: Array<Connection>;
}

/**
 * Check if a given object implements the ConnectionCollection interface.
 */
export function instanceOfConnectionCollection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "self" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "contents" in value;

    return isInstance;
}

export function ConnectionCollectionFromJSON(json: any): ConnectionCollection {
    return ConnectionCollectionFromJSONTyped(json, false);
}

export function ConnectionCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'self': json['self'],
        'kind': json['kind'],
        'contents': ((json['contents'] as Array<any>).map(ConnectionFromJSON)),
    };
}

export function ConnectionCollectionToJSON(value?: ConnectionCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'self': value.self,
        'kind': value.kind,
        'contents': ((value.contents as Array<any>).map(ConnectionToJSON)),
    };
}

