/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConnectionInvitation
 */
export interface ConnectionInvitation {
    /**
     * The invitation identifier used as parent thread ID (pthid) for the response message that follows.
     * @type {string}
     * @memberof ConnectionInvitation
     */
    id: string;
    /**
     * The DIDComm Message Type URI (MTURI) the invitation message coplies with.
     * @type {string}
     * @memberof ConnectionInvitation
     */
    type: string;
    /**
     * The DID representing the sender to be used by recipients for future interactions.
     * @type {string}
     * @memberof ConnectionInvitation
     */
    from: string;
    /**
     * The invitation message encoded as a URL.
     * @type {string}
     * @memberof ConnectionInvitation
     */
    invitationUrl: string;
}

/**
 * Check if a given object implements the ConnectionInvitation interface.
 */
export function instanceOfConnectionInvitation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "invitationUrl" in value;

    return isInstance;
}

export function ConnectionInvitationFromJSON(json: any): ConnectionInvitation {
    return ConnectionInvitationFromJSONTyped(json, false);
}

export function ConnectionInvitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionInvitation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'from': json['from'],
        'invitationUrl': json['invitationUrl'],
    };
}

export function ConnectionInvitationToJSON(value?: ConnectionInvitation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'from': value.from,
        'invitationUrl': value.invitationUrl,
    };
}

