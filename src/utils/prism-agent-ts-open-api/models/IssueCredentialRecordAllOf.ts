/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IssueCredentialRecordAllOf
 */
export interface IssueCredentialRecordAllOf {
    /**
     * 
     * @type {string}
     * @memberof IssueCredentialRecordAllOf
     */
    recordId: string;
    /**
     * 
     * @type {Date}
     * @memberof IssueCredentialRecordAllOf
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof IssueCredentialRecordAllOf
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof IssueCredentialRecordAllOf
     */
    role: IssueCredentialRecordAllOfRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof IssueCredentialRecordAllOf
     */
    protocolState: IssueCredentialRecordAllOfProtocolStateEnum;
    /**
     * 
     * @type {string}
     * @memberof IssueCredentialRecordAllOf
     */
    publicationState?: IssueCredentialRecordAllOfPublicationStateEnum;
    /**
     * 
     * @type {string}
     * @memberof IssueCredentialRecordAllOf
     */
    jwtCredential?: string;
}


/**
 * @export
 */
export const IssueCredentialRecordAllOfRoleEnum = {
    Issuer: 'Issuer',
    Holder: 'Holder'
} as const;
export type IssueCredentialRecordAllOfRoleEnum = typeof IssueCredentialRecordAllOfRoleEnum[keyof typeof IssueCredentialRecordAllOfRoleEnum];

/**
 * @export
 */
export const IssueCredentialRecordAllOfProtocolStateEnum = {
    OfferPending: 'OfferPending',
    OfferSent: 'OfferSent',
    OfferReceived: 'OfferReceived',
    RequestPending: 'RequestPending',
    RequestSent: 'RequestSent',
    RequestReceived: 'RequestReceived',
    ProblemReportPending: 'ProblemReportPending',
    ProblemReportSent: 'ProblemReportSent',
    ProblemReportReceived: 'ProblemReportReceived',
    CredentialPending: 'CredentialPending',
    CredentialSent: 'CredentialSent',
    CredentialReceived: 'CredentialReceived'
} as const;
export type IssueCredentialRecordAllOfProtocolStateEnum = typeof IssueCredentialRecordAllOfProtocolStateEnum[keyof typeof IssueCredentialRecordAllOfProtocolStateEnum];

/**
 * @export
 */
export const IssueCredentialRecordAllOfPublicationStateEnum = {
    PublicationPending: 'PublicationPending',
    PublicationQueued: 'PublicationQueued',
    Published: 'Published'
} as const;
export type IssueCredentialRecordAllOfPublicationStateEnum = typeof IssueCredentialRecordAllOfPublicationStateEnum[keyof typeof IssueCredentialRecordAllOfPublicationStateEnum];


/**
 * Check if a given object implements the IssueCredentialRecordAllOf interface.
 */
export function instanceOfIssueCredentialRecordAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "recordId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "protocolState" in value;

    return isInstance;
}

export function IssueCredentialRecordAllOfFromJSON(json: any): IssueCredentialRecordAllOf {
    return IssueCredentialRecordAllOfFromJSONTyped(json, false);
}

export function IssueCredentialRecordAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueCredentialRecordAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'recordId': json['recordId'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'role': json['role'],
        'protocolState': json['protocolState'],
        'publicationState': !exists(json, 'publicationState') ? undefined : json['publicationState'],
        'jwtCredential': !exists(json, 'jwtCredential') ? undefined : json['jwtCredential'],
    };
}

export function IssueCredentialRecordAllOfToJSON(value?: IssueCredentialRecordAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'recordId': value.recordId,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'role': value.role,
        'protocolState': value.protocolState,
        'publicationState': value.publicationState,
        'jwtCredential': value.jwtCredential,
    };
}

