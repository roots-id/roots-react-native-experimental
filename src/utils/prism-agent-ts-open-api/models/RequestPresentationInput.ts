/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProofRequestAux } from './ProofRequestAux';
import {
    ProofRequestAuxFromJSON,
    ProofRequestAuxFromJSONTyped,
    ProofRequestAuxToJSON,
} from './ProofRequestAux';

/**
 * Request Presentation Input
 * @export
 * @interface RequestPresentationInput
 */
export interface RequestPresentationInput {
    /**
     * 
     * @type {string}
     * @memberof RequestPresentationInput
     */
    connectionId: string;
    /**
     * 
     * @type {Array<ProofRequestAux>}
     * @memberof RequestPresentationInput
     */
    proofs: Array<ProofRequestAux>;
}

/**
 * Check if a given object implements the RequestPresentationInput interface.
 */
export function instanceOfRequestPresentationInput(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "connectionId" in value;
    isInstance = isInstance && "proofs" in value;

    return isInstance;
}

export function RequestPresentationInputFromJSON(json: any): RequestPresentationInput {
    return RequestPresentationInputFromJSONTyped(json, false);
}

export function RequestPresentationInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestPresentationInput {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connectionId': json['connectionId'],
        'proofs': ((json['proofs'] as Array<any>).map(ProofRequestAuxFromJSON)),
    };
}

export function RequestPresentationInputToJSON(value?: RequestPresentationInput | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connectionId': value.connectionId,
        'proofs': ((value.proofs as Array<any>).map(ProofRequestAuxToJSON)),
    };
}

