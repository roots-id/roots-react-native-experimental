/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Proof } from './Proof';
import {
    ProofFromJSON,
    ProofFromJSONTyped,
    ProofToJSON,
} from './Proof';

/**
 * 
 * @export
 * @interface VerifiableCredentialSchema
 */
export interface VerifiableCredentialSchema {
    /**
     * 
     * @type {string}
     * @memberof VerifiableCredentialSchema
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof VerifiableCredentialSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof VerifiableCredentialSchema
     */
    version: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerifiableCredentialSchema
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof VerifiableCredentialSchema
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof VerifiableCredentialSchema
     */
    attributes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof VerifiableCredentialSchema
     */
    author: string;
    /**
     * 
     * @type {Date}
     * @memberof VerifiableCredentialSchema
     */
    authored: Date;
    /**
     * 
     * @type {Proof}
     * @memberof VerifiableCredentialSchema
     */
    proof?: Proof;
}

/**
 * Check if a given object implements the VerifiableCredentialSchema interface.
 */
export function instanceOfVerifiableCredentialSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "authored" in value;

    return isInstance;
}

export function VerifiableCredentialSchemaFromJSON(json: any): VerifiableCredentialSchema {
    return VerifiableCredentialSchemaFromJSONTyped(json, false);
}

export function VerifiableCredentialSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerifiableCredentialSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'version': json['version'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'author': json['author'],
        'authored': (new Date(json['authored'])),
        'proof': !exists(json, 'proof') ? undefined : ProofFromJSON(json['proof']),
    };
}

export function VerifiableCredentialSchemaToJSON(value?: VerifiableCredentialSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'version': value.version,
        'tags': value.tags,
        'description': value.description,
        'attributes': value.attributes,
        'author': value.author,
        'authored': (value.authored.toISOString()),
        'proof': ProofToJSON(value.proof),
    };
}

