/* tslint:disable */
/* eslint-disable */
/**
 * PrismAgent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VerificationMethod } from './VerificationMethod';
import {
    VerificationMethodFromJSON,
    VerificationMethodFromJSONTyped,
    VerificationMethodToJSON,
} from './VerificationMethod';

/**
 * An embedded verificationMethod as JSON or a referenced key as a URI.
 * Referenced key and embedded key are mutually exclusive.
 * If the type is EMBEDDED, `uri` field must be present.
 * Otherwise `verificationMethod` field must be present.
 * @export
 * @interface VerificationMethodOrRef
 */
export interface VerificationMethodOrRef {
    /**
     * 
     * @type {string}
     * @memberof VerificationMethodOrRef
     */
    type: VerificationMethodOrRefTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof VerificationMethodOrRef
     */
    uri?: string;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof VerificationMethodOrRef
     */
    verificationMethod?: VerificationMethod;
}


/**
 * @export
 */
export const VerificationMethodOrRefTypeEnum = {
    Embedded: 'EMBEDDED',
    Referenced: 'REFERENCED'
} as const;
export type VerificationMethodOrRefTypeEnum = typeof VerificationMethodOrRefTypeEnum[keyof typeof VerificationMethodOrRefTypeEnum];


/**
 * Check if a given object implements the VerificationMethodOrRef interface.
 */
export function instanceOfVerificationMethodOrRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function VerificationMethodOrRefFromJSON(json: any): VerificationMethodOrRef {
    return VerificationMethodOrRefFromJSONTyped(json, false);
}

export function VerificationMethodOrRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerificationMethodOrRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'uri': !exists(json, 'uri') ? undefined : json['uri'],
        'verificationMethod': !exists(json, 'verificationMethod') ? undefined : VerificationMethodFromJSON(json['verificationMethod']),
    };
}

export function VerificationMethodOrRefToJSON(value?: VerificationMethodOrRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'uri': value.uri,
        'verificationMethod': VerificationMethodToJSON(value.verificationMethod),
    };
}

